	ALOCAÇÃO DE MEMÓRIA DINÂMICA
(somente os exercícios pares)

2. Faça um programa que leia do usuario o tamanho de um vetor a ser lido e faça a alocação
dinâmica de memória. Em seguida, leia do usuário seus valores e imprima o vetor lido.

#include <stdio.h>
#include <stdlib.h>

int main(){
  int *vet, tam, i;

  printf("Informe o tamanho do vetor: ");
  scanf("%d", &tam);

  vet = (int*) malloc(tam * sizeof(int));

  for (i = 0; i < tam; i++)
  {
    printf("Insira um valor para vet[%d]: \n", i);
    scanf("%d", &*(vet+i));
  }

  for ( i = 0; i < tam; i++)
  {
    printf("vet[%d]: %d\n", i, *(vet+i));
  }
  
  free(vet);
}


4. Faça um programa que receba do usuário o tamanho de uma string e chame uma função
para alocar dinamicamente essa string. Em seguida, o usuário deverá informar o conteúdo
dessa string. O programa imprime a string sem suas vogais.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* aloca_string(int tam);
int main(){
  char *str; 
  int tam, i;

  printf("Informe o tamanho da string: ");
  scanf("%d", &tam);

  str = aloca_string(tam);
  fflush(stdin);
  printf("Insira a string: ");
  fgets(str, tam, stdin);
  
  for ( i = 0; *(str+i) != '\0'; i++)
  {
    if(*(str+i) != 'a' && *(str+i) != 'e' && *(str+i) != 'i' && *(str+i) != 'o' && *(str+i) != 'u'){
      printf("%c", *(str+i));
    }
  }
  free(str);
  return 0;
}
char* aloca_string(int tam){
  char* str = (char*) malloc(tam * sizeof(char));
  return str;
}


6. Faça um programa que simule a memória de um computador: o usuário irá especificar o
tamanho da memória, ou seja, quantos bytes serão alocados do tipo inteiro. Para tanto, a
memória solicitada deve ser um valor múltiplo do tamanho do tipo inteiro. Em seguida, o
usuário terá 2 opções: inserir um valor em uma determinada posição ou consultar o valor
contido em uma determinada posição. A memória deve iniciar com todos os dados zerados.

#include <stdio.h>
#include <stdlib.h>

int main()
{
  int pos, tam, *mem, op, i, qtd_pos;

  printf("Insira a quantiade de posicoes que a sua memoria tem: ");
  scanf("%d", &qtd_pos);
  
  mem = (int*) calloc(qtd_pos, sizeof(int));
  do
  {
    printf("\n----MENU----\n");
    printf("1-Alocar memoria em alguma posicao\n2-Consultar a quantidade alocada em alguma posicao\n3-Sair\n");
    scanf("%d", &op);
    switch (op)
    {
    case 1:
      printf("Informe a posicao da memoria que deseja alocar: ");
      scanf("%d", &pos);
      do
      {
        printf("Informe o tamanho da memoria que deseja armazenar: ");
        scanf("%d", &tam);
        if (tam % 4 != 0)
        {
          printf("Por favor, insira um numero valido de memoria!\n");
        }
      } while (tam % 4 != 0);
      *(mem+pos) = tam;
      
      printf("Memoria alocada!\n");
      break;
    case 2:
      printf("Insira a posicao que deseja consultar: \n");
      scanf("%d", &pos);
      printf("Ha %d bytes na posicao %d", *(mem+pos), pos);
      break;
    }
    if(op < 1 || op > 3){
      printf("Opcao invalida!\n");
    }
  } while (op != 3);

  free(mem);
  return 0;
}

8. Faça um programa para armazenar em memória um vetor de dados contendo 1500 valores
do tipo int, usando a função de alocação dinâmica de memória CALLOC:
a) Faça um loop e verifique se o vetor contém realmente os 1500 valores inicializados com
zero (conte os 1500 zeros do vetor);
b) Atribua para cada elemento do vetor o valor do seu índice junto a este vetor;
c) Exibir na tela os 10 primeiros e os 10 últimos elementos do vetor.

#include <stdio.h>
#include <stdlib.h>

int main()
{
  int vet[1500], *p, i;
  p = vet;

  p = (int*) calloc(1500, sizeof(int));

  for ( i = 0; i < 1500; i++)
  {
    printf("vet[%d]: %d\n", i, *(p+i));
  }
  printf("Ha %d zeros\n", i+1);
  for ( i = 0; i < 1500; i++)
  {
    *(p+i) = i;
    printf("vet[%d]: %d\n", i, *(p+i));
  }
  printf("Os 10 primeiros: \n");
  for ( i = 0; i < 10; i++)
  {
    printf("vet[%d]: %d\n", i, *(p+i));

  }
  printf("Os 10 ultimos: \n");
  for ( i = 1490; i < 1500; i++)
  {
    printf("vet[%d]: %d\n", i, *(p+i));
  }
  
  
  free(p);
  
  return 0;
}


10. Faça um programa que pergunte ao usuário quantos valores ele deseja armazenar em um
vetor de double, depois use a função MALLOC para reservar (alocar) o espaço de memória
de acordo com o especificado pelo usuário. Esse vetor deve ter um tamanho maior ou igual
a 10 elementos. Use este vetor dinâmico como um vetor comum, atribuindo aos 10
primeiros elementos do vetor valores aleatórios (usando a função rand) entre 0 e 100. Exiba
na tela os valores armazenados nos 10 primeiros elementos do vetor.

#include <stdio.h>
#include <stdlib.h>

int main()
{
  double *p;
  int qtd;

  srand(time(NULL));
  printf("Insira uma quantidade, maior ou igual a 10, de elementos do vetor: ");
  scanf("%d", &qtd);

  if(qtd < 10){
    printf("Insira um valor valido!\n");
  }
  p = (double*) malloc(qtd * sizeof(double));

  for (int i = 0; i < 10; i++)
  {
    *(p+i) = rand() % 100;
    printf("vet[%d]: %.2lf\n", i, *(p+i));
  }
  
  return 0;
}


12. Considere um cadastro de produtos de um estoque, com as seguintes informações para cada
produto:
 Código de identificação do produto: representado por um valor inteiro
 Nome do produto: com até 50 caracteres
 Quantidade disponível no estoque: representado por um número inteiro
 Preço de venda: representado por um valor real

a) Defina uma estrutura, denominada produto, que tenha os campos apropriados para
guardar as informações de um produto;
b) Crie um conjunto de N produtos (N é um valor fornecido pelo usuário) e peca ao usuário
para entrar com as informações de cada produto;
c) Encontre o produto com o maior preço de venda;
d) Encontre o produto com a maior quantidade disponível no estoque.

#include <stdio.h>
#include <stdlib.h>

struct produto
{
  int id;
  char nome[50];
  int qtd;
  float preco;
};

int main()
{
  int i, n, maior_preco = 0, maior_qtd = 0, indice_mais_caro = 0, indice_maior_qtd = 0;
  struct produto *p;

  printf("Defina a quantidade de produtos que deseja cadastrar: ");
  scanf("%d", &n);

  p = (struct produto*) calloc(n, sizeof(struct produto));
  for ( i = 0; i < n; i++)
  {
    printf("NOVO PRODUTO!\n");
    printf("Informe a identificacao do produto: \n");
    scanf("%d", &(p+i)->id);
    fflush(stdin);
    printf("Insira o nome do produto: \n");
    fgets((p+i)->nome, 50, stdin);
    printf("Informe a quantidade de produto disponivel: \n");
    scanf("%d", &(p+i)->qtd);
    printf("Digite o preco desse produto: \n");
    scanf("%f", &(p+i)->preco);
  }
  for ( i = 0; i < n; i++)
  {
    if((p+i)->preco > maior_preco){
      maior_preco = (p+i)->preco;
      indice_mais_caro = i;
    }
    if((p+i)->qtd > maior_qtd){
      maior_qtd = (p+i)->qtd;
      indice_maior_qtd = i;
    }
  }
  printf("O produto com maior preco: %s\n", (p+indice_mais_caro)->nome);
  printf("O produto com maior quantidade: %s\n", (p+indice_maior_qtd)->nome);
  free(p);
  return 0;
}


14. Construa um programa que leia o número de linhas e de colunas de uma matriz de números
reais, aloque espaço dinamicamente para esta e a inicialize com valores fornecidos pelo
usuário. Ao final, o programa deverá retornar a matriz na saída padrão com layout
apropriado.
#include <stdio.h>
#include <stdlib.h>

int main()
{
  int lin, col, i, j;

  printf("Informe o numero de linhas: ");
  scanf("%d", &lin);
  printf("Informe o numero de colunas: ");
  scanf("%d", &col);

  float **mat;
  mat = (float**) calloc(lin, sizeof(float*));
  for ( i = 0; i < lin; i++)
  {
    mat[i] = (float*) calloc(col, sizeof(float));
  }
  for ( i = 0; i < lin; i++)
  {
    for ( j = 0; j < col; j++)
    {
      printf("Insira um valor para a posicao mat[%d][%d]: \n", i, j);
      scanf("%f", &mat[i][j]);
    }
  }
  for ( i = 0; i < lin; i++)
  {
    for ( j = 0; j < col; j++)
    {
      printf("%.2f ", mat[i][j]);
    }
    printf("\n");
  }
  for ( i = 0; i < lin; i++)
  {
    free(mat[i]);
  }
  free(mat);
  return 0;
}


16. Faça um programa que leia dois números N e M:
a) Crie e leia uma matriz N x M de inteiros;
b) Crie e construa uma matriz transposta M x N de inteiros;
c) Mostre as duas matrizes.

#include <stdio.h>
#include <stdlib.h>

int main()
{
  int n, m, i, j;

  printf("Informe um numero N: ");
  scanf("%d", &n);
  printf("Informe um numero M: ");
  scanf("%d", &m);

  int **mat, **mat_tran;

  mat = (int**) calloc(n, sizeof(int));
  mat_tran = (int**) calloc(m, sizeof(int));

  for ( i = 0; i < n; i++)
  {
    mat[i] = (int*) calloc(m, sizeof(int));
  }

  for ( i = 0; i < m; i++)
  {
    mat_tran[i] = (int*) calloc(n, sizeof(int));
  }
  for ( i = 0; i < n; i++)
  {
    for ( j = 0; j < m; j++)
    {
      printf("Insira um valor para a posicao mat[%d][%d]: ", i, j);
      scanf("%d", &mat[i][j]);
    }
  }

  for ( i = 0; i < m; i++)
  {
    for ( j = 0; j < n; j++)
    {
      mat_tran[j][i] = mat[i][j];
    }
  }
  printf("A matriz informada: \n");
  for ( i = 0; i < n; i++)
  {
    for ( j = 0; j < m; j++)
    {
      printf("%3d ", mat[i][j]);
    }
    printf("\n");
  }
  
  printf("Sua transposta: \n");
  for ( i = 0; i < m; i++)
  {
    for ( j = 0; j < n; j++)
    {
      printf("%3d ", mat[j][i]);
    }
    printf("\n");
  }
  for ( i = 0; i < n; i++)
  {
    free(mat[i]);
  }
  free(mat);
  for ( i = 0; i < m; i++)
  {
    free(mat_tran[i]);
  }
  free(mat_tran);
  return 0;
}


18. Escreva um programa para fazer a alocação dinâmica dos blocos de dados conforme
solicitado abaixo:
a) Vetor de 1024 Bytes (1 Kbyte);
b) Matriz de inteiros de dimensão 10 × 10;
c) Vetor para armazenar 50 registros contendo: nome do produto (30 caracteres), código
do produto (inteiro) e preço em reais;
d) Texto de até 100 linhas com até 80 caracteres em cada linha.

#include <stdio.h>
#include <stdlib.h>

struct registro
{
  char nome[30];
  int codigo;
  float preco;
};

int main()
{
  int *vet, **mat, i;
  struct registro *registros;
  char **texto;
  //alocar 1024 bytes
  vet = (int*) malloc(1024);
  free(vet);
  //alocar memoria para uma matriz 10x10
  mat = (int**) calloc(10, sizeof(int*));
  for ( i = 0; i < 10; i++)
  {
    mat[i] = (int*) calloc(10, sizeof(int));
  }
  for ( i = 0; i < 50; i++)
  {
    free(mat[i]);
  }
  free(mat);

  //alocacao pra 50 registros
  registros = (struct registro*) calloc(50, sizeof(struct registro));
  free(registros);

  //alocacao pro texto
  texto = (char**) calloc(1000, sizeof(char*));
  for ( i = 0; i < 1000; i++)
  {
    texto[i] = (char*) calloc(80, sizeof(char));
  }
  for ( i = 0; i < 1000; i++)
  {
    free(texto[i]);
  }
  free(texto);
  return 0;
}


20. Faça um programa que:
a) Peça para o usuário entrar com o nome e a posição (coordenadas X e Y) de N cidades e
as armazene em um vetor de estruturas (N é informado pelo usuário);
b) Crie uma matriz de distâncias entre cidades de tamanho N x N;
c) Calcule as distâncias entre cada duas cidades e armazene na matriz;
d) Exiba na tela a matriz de distancias obtida;
e) Quando o usuário digitar o número de duas cidades o programa deverá retornar a
distância entre elas.


#include <stdio.h>
#include <stdlib.h>
#include <math.h>

struct cidade
{
  char nome[30];
  int x, y;
};


int main()
{
  int n, **mat, i, j, cid1, cid2;
  struct cidade *estruturas;

  printf("Informe a quantidade de cidades a serem inseridas: ");
  scanf("%d", &n);

  estruturas = (struct cidade*) calloc(n, sizeof(struct cidade));
  for ( i = 0; i < n; i++)
  {
    printf("Informe o nome da cidade: \n");
    fflush(stdin);
    fgets(estruturas->nome, 30, stdin);
    printf("Insira as coordenadas X e Y, respectivamente: ");
    scanf("%d%d", estruturas->x, estruturas->y);
  }

  mat = (int**) calloc(n, sizeof(int*));

  for ( i = 0; i < n; i++)
  {
    mat[i] = (int) calloc(n, sizeof(int));
  }
  
  for ( i = 0; i < n; i++)
  {
    for ( j = 0; j < n; j++)
    {
      mat[i][j] = sqrt((pow(estruturas->x, 2)) + (estruturas->y, 2));
    }
    
  }
  
  printf("Insira o numero de duas cidades: ");
  scanf("%d%d", &cid1, &cid2);
  printf("A distância entre %s e %s eh: %d", estruturas[cid1-1].nome, estruturas[cid2-1].nome, mat[cid1 - 1][cid2 -1]);

  for ( i = 0; i < n; i++)
  {
    free(mat[i]);
  }
  free(mat);
  free(estruturas);
  return 0;
}




