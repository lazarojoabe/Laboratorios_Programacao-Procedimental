/*Exercícios de PP*/
  ARRAYS
1. Faça um programa que possua um vetor denominado A que armazene 6 números inteiros.
O programa deve executar os seguintes passos:
a) Atribua os seguintes valores a esse vetor: 1, 0, 5, -2, -5, 7.
b) Armazene em uma variável inteira (simples) a soma entre os valores das posições
A[0], A[1] e A[5] do vetor e mostre na tela esta soma.
c) Modifique o vetor na posição 4, atribuindo a esta posição o valor 100.
d) Mostre na tela cada valor do vetor A, um em cada linha.

#include <stdio.h>
int main(){
    int soma, A[] = {1, 0, 5, -2, -5, -7};
    soma = A[0] + A[1] + A[5];
    printf("A soma eh: %d\n", soma);
    A[4] = 100;
    printf("A posicao A[4] foi alterada, o novo valor eh: %d\n", A[4]);
    for (int i = 0; i <6 ; i++)
    {
        printf("A[%d] = %d\n", i, A[i]);
    }
    return 0;
}


2. Faça um programa que leia um vetor de 8 posições e, em seguida, leia também dois valores
X e Y quaisquer correspondentes a duas posições no vetor. Ao final seu programa deverá
escrever a soma dos valores encontrados nas respectivas posições X e Y.
#include <stdio.h>
int main(){
    int A[8], x, y;
    for (int i = 0; i < 8; i++)
    {
        printf("Informe um valor para a posicao A[%d]: ", i);
        scanf("%d", &A[i]);
    }
    printf("Informe duas posicoes do array para saber a soma: ");
    scanf("%d%d", &x, &y);
    printf("A soma eh %d", A[x] + A[y]);
    return 0;
}

3. Crie um programa que lê 6 valores inteiros e, em seguida, mostre na tela os valores lidos na
ordem inversa.
#include <stdio.h>
int main(){
    int A[6];
    for (int i = 0; i < 6; i++)
    {
        printf("Informe um valor para a posicao A[%d]: ", i);
        scanf("%d", &A[i]);
    }
    printf("Exibindo na ordem inversa: ");
    for (int i = 6; i >= 0; i--)
    {
        printf("%d\n", A[i]);
    }
    return 0;
}


4. Fazer um programa para ler 5 valores e, em seguida, mostrar a posição onde se encontram
o maior e o menor valor.

#include <stdio.h>
int main(){
    int A[5], maior, menor, posM, posm;
    maior = posM = posm = 0;
    menor = A[0];
    for (int i = 0; i < 5; i++)
    {
        printf("Informe um valor para a posicao A[%d]: ", i);
        scanf("%d", &A[i]);
    }
    for (int i = 0; i < 5; i++)
    {

        if(A[i] > maior){
            maior = A[i];
            posM = i;
        }
        if(A[i] < menor){
            menor = A[i];
            posm = i;
        }
    }
    printf("O maior numero se encontra na posicao %d e o menor, na %d", posM, posm);
    return 0;
}

5. Faça um vetor de tamanho 50 preenchido com o seguinte valor: (i+5*i)%(i+1), sendo i
a posição do elemento no vetor. Em seguida imprima o vetor na tela.

#include <stdio.h>
int main(){
    int A[50];
    for (int i = 0; i < 50; i++)
    {
        A[i] = (i+5*i)%(i+1);
        printf("%d\n", A[i]);
    }
    return 0;
}


6. Leia 10 números inteiros e armazene em um vetor. Em seguida escreva os elementos que
são primos e suas respectivas posições no vetor.
#include <stdio.h>
int eh_primo(int n){
    int metade;
    if((n == 0) || (n == 1)){
        return 0;
    }
    if((n == 2) || (n == 3) || (n == 5) || (n == 7)){
        return 1;
    }
    if(!(n % 2)|| !(n%3) || !(n%5) || !(n%7)){
        return 0;
    }

    metade = ((n/2) + 1);
    for (int i = 3; i < metade; i+=2)
    {
        if((n%i) == 0){
            return 0;
        }
    }
    return 1;
}
int main(){
    int A[10];
    for (int i = 0; i < 10; i++)
    {
        printf("Digite um valor para a posicao A[%d]: ", i);
        scanf("%d", &A[i]);
    }
    for (int i = 0; i < 10; i++)
    {
        if(eh_primo(A[i]) == 1){
            printf("O elemento da posicao A[%d] eh primo\n", i);
        }
    }
    return 0;
}

7. Faça um programa que receba 6 números inteiros e mostre:
 Os números pares digitados;
 A soma dos números pares digitados;
 Os números ímpares digitados;
 A quantidade de números ímpares digitados;
#include <stdio.h>
int eh_par(int n){
    if(n % 2 == 0){
        return 1;
    } else {
        return 0;
    }
}
int eh_impar(int n){
    if(n % 2 != 0){
        return 1;
    } else {
        return 0;
    }
}
int main(){
    int A[6], somaPar, somaImpar;
    somaImpar = somaPar = 0;
    for (int i = 0; i < 6; i++)
    {
        printf("Digite um valor para a posicao A[%d]: ", i);
        scanf("%d", &A[i]);
    }
    for (int i = 0; i < 6; i++)
    {
        if(eh_par(A[i]) == 1){
            printf("%d eh par\n", A[i]);
            somaPar += A[i];
        }
    }
    printf("A soma dos pares eh %d\n", somaPar);
    for (int i = 0; i < 6; i++)
    {
        if(eh_impar(A[i]) == 1){
            printf("%d eh impar\n", A[i]);
            somaImpar += A[i];
        }
    }
    printf("A soma dos impares eh %d", somaImpar);
    return 0;
}


8. Faça um programa para ler 10 números DIFERENTES a serem armazenados em um vetor. Os
dados deverão ser armazenados no vetor na ordem que forem sendo lidos, sendo que caso
o usuário digite um número que já foi digitado anteriormente, o programa deverá pedir para
ele digitar outro número. Note que cada valor digitado pelo usuário deve ser pesquisado no
vetor, verificando se ele existe entre os números que já foram fornecidos. Exibir na tela o
vetor final que foi digitado.

#include <stdio.h>

int main(){
    int A[10];
    for (int i = 0; i < 10; i++)
    {
        printf("Digite um valor para a posicao A[%d]: ", i);
        scanf("%d", &A[i]);
        if(A[i] == A[i - 1]){
            printf("Esse valor ja fois inserido. Digite outro: ");
            scanf("%d", &A[i]);
        }
    }
    for (int i = 0; i < 10; i++)
    {
        printf("A[%d] = %d\n", i, A[i]);
    }
    return 0;  
}

  MATRIZES

1. Leia uma matriz 4 × 4, conte e escreva quantos valores maiores que 10 ela possui.
#include <stdio.h>

int main(){
    int A[4][4], maiorQ10 = 0;
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            printf("Insira um valor para a posicao A[%d][%d]: ", i, j);
            scanf("%d", &A[i][j]);
            if(A[i][j] > 10){
                maiorQ10++;
            }
        }
    }   
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            printf("%d ", A[i][j]);
        }
        printf("\n");
    }
    printf("Ha %d valores maior que 10", maiorQ10);
    return 0;
}


2. Declare uma matriz 5 × 5. Preencha com 1 a diagonal principal e com 0 os demais elementos.
Escreva ao final a matriz obtida.

#include <stdio.h>

int main(){
    int A[5][5];
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            if(i == j){
                A[i][j] = 1;
            } else {
                A[i][j] = 0;
            }
        }
    }   
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            printf("%d ", A[i][j]);
        }
        printf("\n");
    }
    return 0;
}

3. Leia uma matriz 4 × 4, imprima a matriz e retorne a localização (linha e a coluna) do maior
valor.
#include <stdio.h>

int main(){
    int A[5][5], maior, posMaiorI, posMaiorJ;
    maior = posMaiorI = posMaiorJ = 0;
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            printf("Insira um valor para a posicao A[%d][%d]: ", i, j);
            scanf("%d", &A[i][j]);
            if(A[i][j] > maior){
                maior = A[i][j];
            }
        }
    }   
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            printf("%d ", A[i][j]);
            if(A[i][j] == maior){
                posMaiorI = i;
                posMaiorJ = j;
            }
        }
        printf("\n");
    }
    printf("O maior valor se encontra na posicao A[%d][%d]", posMaiorI, posMaiorJ);
    return 0;
}

4. Leia uma matriz 5 × 5. Leia também um valor X. O programa deverá fazer uma busca desse
valor na matriz e, ao final, escrever a localização (linha e coluna) ou uma mensagem de “não
encontrado”.

#include <stdio.h>

int main(){
    int A[5][5], x, posIX, posJX;
    posIX = posJX = 0;
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            printf("Insira um valor para a posicao A[%d][%d]: ", i, j);
            scanf("%d", &A[i][j]);
        }
    }  
    printf("Insira um valor(X): ");
    scanf("%d", &x); 
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            printf("%d", A[i][j]);
        }
        printf("\n");
    }
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            if(x == A[i][j]){
                posIX = i;
                posJX = j;
            }
        }
        if(posIX == 0 && posJX == 0){
            posIX = -1;
            posJX = -1;
        }
    }
    if(posIX == -1 && posJX == -1){
        printf("O valor %d nao se encontra na matriz", x);
    } else {
        printf("O valor %d esta em A[%d][%d]", x, posIX, posJX);
    }
    return 0;
}


5. Gerar e imprimir uma matriz de tamanho 10 × 10, onde seus elementos são da forma:
A[i][j] = 2i + 7j - 2 se i < j;
A[i][j] = 3i
2
- 1 se i = j;
A[i][j] = 4i
3 – 5j
2 + 1 se i > j:

#include <stdio.h>

int main(){
    int A[10][10];
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if(i < j){
                A[i][j] = (2 * i) + (7 * j) - 2;
            } else if(i == j){
                A[i][j] = (3 * (i * i)) - 1;
            } else {
                A[i][j] = (4 * (i * i * i)) - (5 * (j * j)) + 1;
            }
        }
        
    }
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            printf("%4d ", A[i][j]);
        }
        printf("\n");
    }
    return 0;
}


6. Gere matriz 4 × 4 com valores no intervalo [1, 20]. Escreva um programa que transforme a
matriz gerada numa matriz triangular inferior, ou seja, atribuindo zero a todos os elementos
acima da diagonal principal. Imprima a matriz original e a matriz transformada.

#include <stdio.h>
#include <stdlib.h>
int main(){
    int A[4][4];
    srand((time(NULL)));
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            A[i][j] = (rand() % 20) + 1;
            printf("\t %d ", A[i][j]);
        }
        printf("\n");
    }

    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
              if(i < j){
                A[i][j] = 0;
              }
        }
    }
    printf("\n");
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            printf("\t %d", A[i][j]);
        }
        printf("\n");
    }
    
    return 0;
}


7. Faça um programa para gerar automaticamente números entre 0 e 99 de uma cartela de
bingo. Sabendo que cada cartela deverá conter 5 linhas de 5 números, gere estes dados de
modo a não ter números repetidos dentro das cartelas. O programa deve exibir na tela a
cartela gerada.

#include <stdio.h>
#include <stdlib.h>
int main(){
    int cart[5][5];
    srand(time(NULL));
    for(int i = 0; i < 5; i++){
        for (int j = 0; j < 5; j++)
        {
            cart[i][j] = (rand() % 99) + 0;
            printf("\t %d", cart[i][j]);
        }
        printf("\n");
    }
    return 0;
}

8. Faça um programa que leia duas matrizes 2 × 2 com valores reais. Ofereça ao usuário um
menu de opções:
a) somar as duas matrizes
b) subtrair a primeira matriz da segunda
c) adicionar uma constante às duas matrizes
d) imprimir as matrizes

#include <stdio.h>

int main(){
    int mat1[2][2], mat2[2][2], mat_resul[2][2], op, i, j, cons;

    for ( i = 0; i < 2; i++)
    {
        for ( j = 0; j < 2; j++)
        {
            printf("Insira um valor real para a matriz 1 na posicao A[%d][%d]", i, j);
            scanf("%d", &mat1[i][j]);
        }
        
    }
    
    for ( i = 0; i < 2; i++)
    {
        for ( j = 0; j < 2; j++)
        {
            printf("Insira um valor real para a matriz 2 na posicao A[%d][%d]", i, j);
            scanf("%d", &mat2[i][j]);
        }
        
    }
    do{
        printf("ESCOLHA UMA OPCAO:\n");
        printf("1 - Somar matrizes\n2 - Subtrair a primeira matriz da segunda\n3 - Adicionar uma constante nas duas matrizes\n4 - Imprimir as matrizes\n5 - Sair\n");
        scanf("%d", &op);
        switch (op)
        {
        case 1:
            printf("A soma das matrizes eh:\n");
            for ( i = 0; i < 2; i++)
            {
                for ( j = 0; j < 2; j++)
                {
                    mat_resul[i][j] = mat1[i][j] + mat2[i][j];
                    printf("%2d", mat_resul[i][j]);
                }
                printf("\n");
            }
            break;
        case 2:
            printf("A subtracao da primeira matriz pela segunda eh:\n");
            for ( i = 0; i < 2; i++)
            {
                for ( j = 0; j < 2; j++)
                {
                    mat_resul[i][j] = mat1[i][j] - mat2[i][j];
                    printf("%2d", mat_resul[i][j]);
                }
                printf("\n");
            }
            break;
        case 3:
            printf("Insira a constante que deseja adicionar nas matrizes:");
            scanf("%d", &cons);
            printf("%d foi adicionando nas matrizes\n", cons);
            for (i = 0; i < 2; i++)
            {
                for ( j = 0; j < 2; j++)
                {
                    mat1[i][j] += cons;
                    printf("%2d", mat1[i][j]);
                }
                printf("\n");
            }
            printf("\n");
            for (i = 0; i < 2; i++)
            {
                for ( j = 0; j < 2; j++)
                {
                    mat2[i][j] += cons;
                    printf("%2d", mat2[i][j]);
                }
                printf("\n");
            }
            break;
        case 4:
            for ( i = 0; i < 2; i++)
            {
                for ( j = 0; j < 2; j++)
                {
                    printf("%2d", mat1[i][j]);
                }
                printf("\n");
            }
            printf("\n");
            for ( i = 0; i < 2; i++)
            {
                for ( j = 0; j < 2; j++)
                {
                    printf("%2d", mat2[i][j]);
                }
                printf("\n");
            }
            break;
        case 5:
            break;
        default:
            printf("DIGITE UMA OPCAO VALIDA!\n\n");
            
            break;
        }
    } while(op != 5);

    return 0;
}